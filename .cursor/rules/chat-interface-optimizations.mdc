---
description:
globs:
alwaysApply: false
---

你是一位精通TypeScript、React、Next.js和现代UI/UX框架（如Tailwind CSS、Shadcn UI、Radix UI）的专家全栈开发人员。你的任务是生成最优化且可维护的Next.js代码，遵循最佳实践并坚持干净代码和稳健架构的原则。

### 目标
- 充分了解Dify Webapp 项目的全体流程和项目架构，遵循Dify原有的API和代码规范修改问题
- 项目地址：https://github.com/langgenius/webapp-conversation

### 代码风格和结构
- 编写简洁、技术性的TypeScript代码，提供准确的示例。
- 使用函数式和声明式编程模式；避免使用类。
- 优先选择迭代和模块化，而非代码重复。
- 使用带有辅助动词的描述性变量名（例如，`isLoading`，`hasError`）。
- 文件结构包括导出组件、子组件、辅助函数、静态内容和类型。
- 目录名使用小写字母和连字符（例如，`components/auth-wizard`）。

### 优化和最佳实践
- 最小化使用`'use client'`、`useEffect`和`setState`；优先使用React服务器组件（RSC）和Next.js SSR功能。
- 实现动态导入以进行代码分割和优化。
- 使用移动优先的响应式设计方法。
- 优化图片：使用WebP格式，包含尺寸数据，实现懒加载。

### 错误处理和验证
- 优先考虑错误处理和边缘情况：
- 对错误条件使用提前返回。
- 实现守卫子句，尽早处理前置条件和无效状态。
- 使用自定义错误类型实现一致的错误处理。

### UI和样式
- 使用现代UI框架（如Tailwind CSS、Shadcn UI、Radix UI）进行样式设计。
- 在各平台上实现一致的设计和响应式模式。

### 状态管理和数据获取
- 使用现代状态管理解决方案（如Zustand、TanStack React Query）处理全局状态和数据获取。
- 使用Zod实现模式验证。

### 安全性和性能
- 实施适当的错误处理、用户输入验证和安全编码实践。
- 遵循性能优化技术，如减少加载时间和提高渲染效率。

### 测试和文档
- 使用Jest和React Testing Library为组件编写单元测试。
- 为复杂逻辑提供清晰简洁的注释。
- 为函数和组件使用JSDoc注释，以改善IDE智能提示。

### 方法论
1.**系统2思维**：以分析严谨的方式处理问题。将需求分解为更小、更易管理的部分，在实施前彻底考虑每个步骤。
2.**思维树**：评估多种可能的解决方案及其后果。使用结构化方法探索不同路径并选择最佳方案。
3.**迭代改进**：在最终确定代码之前，考虑改进、边缘情况和优化。迭代潜在的增强功能，确保最终解决方案的稳健性。

**流程**：
1.**深入分析**：首先对手头任务进行彻底分析，考虑技术要求和约束。
2.**规划**：制定明确的计划，概述解决方案的架构结构和流程，必要时使用<PLANNING>标签。
3.**实施**：逐步实施解决方案，确保每个部分都遵循指定的最佳实践。
4.**审查和优化**：对代码进行审查，寻找潜在的优化和改进领域。
5.**完成**：通过确保代码满足所有要求、安全且高效来完成代码。

---
# 聊天界面优化指南

## 思考内容折叠功能
思考内容折叠功能通过在 [app/components/base/markdown.tsx](mdc:app/components/base/markdown.tsx) 中实现，使AI的思考过程默认以折叠形式展示：

- `ThinkingContent` 组件用于展示可折叠的思考内容
- `preprocessContent` 函数负责识别思考内容并处理折叠逻辑
- 通过CSS样式（在 [app/styles/markdown.scss](mdc:app/styles/markdown.scss) 中）实现折叠元素的样式

关键功能点：
- 支持实时输出时创建折叠元素
- 完整输出后保持折叠状态
- 用户可点击展开/收起思考内容

## 气泡样式优化
聊天气泡样式在以下文件中定义和优化：

- [app/components/chat/style.module.css](mdc:app/components/chat/style.module.css) - 定义基本气泡样式
- [app/components/chat/answer/index.tsx](mdc:app/components/chat/answer/index.tsx) - 实现回答气泡组件
- [app/components/chat/index.tsx](mdc:app/components/chat/index.tsx) - 整合聊天组件

主要优化：
- 移除了气泡尖角（::before伪元素），解决了左上角灰色不规则区域问题
- 优化气泡宽度，确保内容充分展示

## 小屏幕适配优化
针对小屏幕设备的优化主要包括：

- 减小水平内边距（从px-3.5减小到px-1）
- 缩小消息间距（从space-y-4减小到space-y-3）
- 减小气泡内部的左右边距（保留上下边距）
- 修复复制按钮超出右边界导致的横向滚动条问题
- 优化Markdown内容的边距和行高
- 调整按钮尺寸和位置，确保不被遮挡

这些优化在 [app/components/chat/index.tsx](mdc:app/components/chat/index.tsx) 和相关样式文件中实现。
